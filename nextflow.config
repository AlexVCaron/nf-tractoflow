/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf/tractoflow Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    //*BIDS options**//
    clean_bids=false

    //**Global options**//
    b0_thr_extract_b0=10
    dwi_shell_tolerance=20

    //**SH fitting**//
    sh_fitting=false
    sh_fitting_order=6
    sh_fitting_basis="descoteaux07"


    //**Preliminary DWI brain extraction**//
    dilate_b0_mask_prelim_brain_extraction=5
    bet_prelim_f=0.16

    //**Denoise dwi (dwidenoise in Mrtrix3)**//
    run_dwi_denoising=true
    extent=7

    //**GIBBS CORRECTION (mrdegibbs in Mrtrix3)**//
    run_gibbs_correction=false

    //**Topup**//
    run_topup=true
    config_topup="b02b0.cnf"
    encoding_direction="y"
    readout=0.062
    prefix_topup="topup_results"

    //**Eddy**//
    run_eddy=true
    eddy_cmd="eddy_cpu"
    bet_topup_before_eddy_f=0.16
    use_slice_drop_correction=true

    //**Final DWI BET**//
    bet_dwi_final_f=0.16

    //**Denoise T1**//
    run_t1_denoising=false

    //**Resample T1**//
    run_resample_t1=true
    t1_resolution=1
    t1_interpolation="lin"

    //**Normalize DWI**//
    fa_mask_threshold=0.4

    //**Resample DWI**//
    run_resample_dwi=true
    dwi_resolution=1
    dwi_interpolation="lin"

    //**Extract DTI shells using this value as maximum**//
    max_dti_shell_value=1200

    //**Extract fODF shells using this value as minimum**//
    min_fodf_shell_value=700

    //**Segment tissues**//
    number_of_tissues=3

    //**Compute fiber response function (frf)**//
    fa=0.7
    min_fa=0.5
    min_nvox=300
    roi_radius=20
    set_frf=true
    manual_frf="15,4,4"

    //**Mean fiber response function (frf)**//
    mean_frf=false

    //**Compute fODF metrics**//
    sh_order=8
    basis="descoteaux07"
    fodf_metrics_a_factor=2.0
    relative_threshold=0.1
    max_fa_in_ventricle=0.1
    min_md_in_ventricle=0.003

    //**PFT seeding mask**//
    pft_seeding_mask_type="wm"
    pft_fa_seeding_mask_threshold=0.1

    //**PFT tracking**//
    run_pft_tracking=true
    pft_compress_streamlines=true
    pft_algo="prob"
    pft_seeding="npv"
    pft_nbr_seeds=10
    pft_step=0.5
    pft_theta=20
    pft_sfthres=0.1
    pft_sfthres_init=0.5
    pft_min_len=20
    pft_max_len=200
    pft_particles=15
    pft_back=2
    pft_front=1
    pft_compress_value=0.2
    pft_random_seed=0

    //**Local seeding mask**//
    local_seeding_mask_type="wm"
    local_fa_seeding_mask_threshold=0.1

    //**Local tracking mask**//
    local_tracking_mask_type="wm"
    local_fa_tracking_mask_threshold=0.1

    //**Local tracking**//
    run_local_tracking=false
    local_compress_streamlines=true
    local_algo="prob"
    local_seeding="npv"
    local_nbr_seeds=10
    local_step=0.5
    local_theta=20
    local_sfthres=0.1
    local_sfthres_init=0.5
    local_min_len=20
    local_max_len=200
    local_compress_value=0.2
    local_random_seed=0
    local_tracking_gpu=false
    local_batch_size_gpu=10000

    //**Number of processes per tasks**//
    processes_brain_extraction_t1=4
    processes_denoise_dwi=4
    processes_denoise_t1=4
    processes_eddy=4
    processes_fodf=4
    processes_registration=4
    processes_local_tracking=4

    //**Tractoflow-ABS**//
    run_tractoflow_abs = false

    //**Template T1 path**//
    template_t1="/human-data/mni_152_sym_09c/t1"

    // Input options
    input                      = null// MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf/tractoflow custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific institutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/tractoflow.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/tractoflow profiles: ${params.custom_config_base}/pipeline/tractoflow.config")
// }
profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters
    id 'nf-schema@2.0.0' // Creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf/tractoflow'
    author          = """@AlexVCaron"""
    homePage        = 'https://github.com/nf/tractoflow'
    description     = """Human diffusion MRI processing and tractography"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
