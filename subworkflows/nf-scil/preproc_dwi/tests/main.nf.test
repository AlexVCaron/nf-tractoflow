nextflow_workflow {

    name "Test Subworkflow PREPROC_DWI"
    script "../main.nf"
    workflow "PREPROC_DWI"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/preproc_dwi"

    tag "betcrop/cropvolume"
    tag "betcrop/fslbetcrop"
    tag "denoising/mppca"
    tag "image/resample"
    tag "preproc/n4"
    tag "preproc/normalize"
    tag "utils/extractb0"
    tag "topup_eddy"

    tag "load_test_data"

    /*setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "topup_eddy.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }*/

    test("preproc_dwi_rev_b0") {

        when {
            workflow {
                """
                input[0] = Channel.from([[
                    [ id:'sub-01', single_end:false ],
                    file("/workspaces/topup_eddy_light/sub-01_dir-AP_dwi.nii.gz"),
                    file("/workspaces/topup_eddy_light/sub-01_dir-AP_dwi.bval"),
                    file("/workspaces/topup_eddy_light/sub-01_dir-AP_dwi.bvec")
                ]]).view()
                input[1] = []
                input[2] = []
                input[3] = Channel.from([[
                    [ id:'sub-01', single_end:false ],
                    file("/workspaces/topup_eddy_light/sub-01_dir-PA_sbref.nii.gz")
                ]]).view()
                input[4] = []
                """
                /*"""
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.nii.gz"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bval"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bvec")
                    ]}
                input[1] = []
                input[2] = []
                input[3] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-PA_sbref.nii.gz")
                    ]}
                input[4] = []
                """*/
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    /*test("preproc_dwi_rev_dwi_nob0") {

        when {
            workflow {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.nii.gz"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bval"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bvec")
                    ]}
                input[1] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-PA_dwi.nii.gz"),
                        file("\${test_data_directory}/sub-01_dir-PA_dwi.bval"),
                        file("\${test_data_directory}/sub-01_dir-PA_dwi.bvec")
                    ]}
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }


    test("preproc_dwi_all_options") {

        when {
            workflow {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.nii.gz"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bval"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bvec")
                    ]}
                input[1] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-PA_dwi.nii.gz"),
                        file("\${test_data_directory}/sub-01_dir-PA_dwi.bval"),
                        file("\${test_data_directory}/sub-01_dir-PA_dwi.bvec")
                    ]}
                input[2] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-AP_sbref.nii.gz")
                    ]}
                input[3] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-PA_sbref.nii.gz")
                    ]}
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }*/
}
